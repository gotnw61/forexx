#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Forex Trading Bot iÃ§in Streamlit tabanlÄ± kullanÄ±cÄ± arayÃ¼zÃ¼.
Bot'un tÃ¼m Ã¶zelliklerine eriÅŸim saÄŸlar ve gÃ¶rselleÅŸtirir.
"""
import os
import sys
import logging
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import time
import threading
import json

# Proje kÃ¶k dizinini ayarla
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(ROOT_DIR)

# Grafik modÃ¼lÃ¼nÃ¼ iÃ§e aktar
from ui.chart_module import ChartModule

logger = logging.getLogger("ForexTradingBot.StreamlitApp")

def run_streamlit_app(bot):
    """
    Streamlit uygulamasÄ±nÄ± baÅŸlat
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    import os
    import sys
    import streamlit.web.cli as stcli
    
    # Streamlit config ayarlarÄ±
    streamlit_port = bot.settings.get("ui", {}).get("port", 8501)
    os.environ["STREAMLIT_SERVER_PORT"] = str(streamlit_port)
    os.environ["STREAMLIT_SERVER_HEADLESS"] = "true"
    
    # Streamlit'i doÄŸrudan Ã§alÄ±ÅŸtÄ±r
    sys.argv = [
        "streamlit", 
        "run", 
        os.path.abspath(__file__), 
        "--global.developmentMode=false"
    ]
    
    # Streamlit'i ana thread'de Ã§alÄ±ÅŸtÄ±r
    stcli.main()

# Streamlit sayfasÄ±nÄ± oluÅŸtur
def main():
    """
    Ana Streamlit uygulamasÄ±
    """
    # Sayfa yapÄ±landÄ±rmasÄ±
    st.set_page_config(
        page_title="GeliÅŸmiÅŸ Forex Trading Bot",
        page_icon="ðŸ“ˆ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # CSS stilleri
    st.markdown(""" 
    <style>
    .big-font {
        font-size:20px !important;
        font-weight: bold;
    }
    .medium-font {
        font-size:16px !important;
    }
    .buy-signal {
        color: green;
        font-weight: bold;
    }
    .sell-signal {
        color: red;
        font-weight: bold;
    }
    .neutral-signal {
        color: gray;
        font-weight: bold;
    }
    .success-box {
        padding: 10px;
        border-radius: 5px;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .warning-box {
        padding: 10px;
        border-radius: 5px;
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        color: #856404;
    }
    .error-box {
        padding: 10px;
        border-radius: 5px;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    .info-box {
        padding: 10px;
        border-radius: 5px;
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # BaÅŸlÄ±k
    st.title("GeliÅŸmiÅŸ Forex Trading Bot")
    
    # Bot Ã¶rneÄŸi oluÅŸtur (Streamlit iÃ§in global state kullan)
    if 'bot_initialized' not in st.session_state:
        # Botu baÅŸlatma fonksiyonu
        bot = initialize_bot()
        
        if bot is not None:
            st.session_state.bot = bot
            st.session_state.bot_initialized = True
            st.session_state.chart_module = ChartModule(bot.data_manager)
            
            # Bot durumu
            st.session_state.bot_running = False
            st.session_state.last_update = None
            st.session_state.signals = []
            st.session_state.open_positions = []
        else:
            st.error("Bot baÅŸlatÄ±lamadÄ±! LÃ¼tfen ayarlarÄ± kontrol edin ve yeniden deneyin.")
            return
    else:
        # Mevcut bot Ã¶rneÄŸini kullan
        bot = st.session_state.bot
    
    # Yan menÃ¼
    with st.sidebar:
        st.header("Ä°ÅŸlemler")
        
        # Bot durumu
        bot_status = "Ã‡alÄ±ÅŸÄ±yor" if st.session_state.bot_running else "Durduruldu"
        st.markdown(f"**Bot Durumu:** {bot_status}")
        
        # Bot kontrolleri
        if st.session_state.bot_running:
            if st.button("Bot'u Durdur", key="stop_button"):
                stop_bot(bot)
                st.session_state.bot_running = False
                st.success("Bot durduruldu!")
                # SayfayÄ± yenile
                st.experimental_rerun()
        else:
            if st.button("Bot'u BaÅŸlat", key="start_button"):
                start_bot(bot)
                st.session_state.bot_running = True
                st.success("Bot baÅŸlatÄ±ldÄ±!")
                # SayfayÄ± yenile
                st.experimental_rerun()
        
        # Sayfa navigasyonu
        st.markdown("---")
        st.header("Sayfalar")
        
        page = st.radio(
            "Sayfa SeÃ§in:",
            ["GÃ¶sterge Paneli", "CanlÄ± Grafikler", "Sinyal Ä°zleme", "AÃ§Ä±k Pozisyonlar", 
             "MT5 AyarlarÄ±", "Bot AyarlarÄ±", "Performans", "API YÃ¶netimi"]
        )
        
        # En son gÃ¼ncelleme zamanÄ±
        if st.session_state.last_update:
            last_update_str = st.session_state.last_update.strftime("%H:%M:%S")
            st.markdown(f"*Son gÃ¼ncelleme: {last_update_str}*")
        
        # Hesap Bilgileri
        st.markdown("---")
        st.header("Hesap Bilgileri")
        
        account_info = bot.broker.get_account_info()
        if account_info:
            st.markdown(f"**Bakiye:** {account_info.get('balance', 0):.2f} {account_info.get('currency', 'USD')}")
            st.markdown(f"**VarlÄ±k:** {account_info.get('equity', 0):.2f} {account_info.get('currency', 'USD')}")
            st.markdown(f"**Serbest Marjin:** {account_info.get('free_margin', 0):.2f} {account_info.get('currency', 'USD')}")
            st.markdown(f"**Marjin Seviyesi:** {account_info.get('margin_level', 0):.2f}%")
            st.markdown(f"**Hesap Tipi:** {account_info.get('trade_mode', 'Demo')}")
        else:
            st.warning("Hesap bilgileri alÄ±namÄ±yor!")
        
        # Yenile butonu
        if st.button("Verileri Yenile"):
            # Verileri yenile
            refresh_data(bot)
            st.success("Veriler yenilendi!")
    
    # Ana sayfa iÃ§erikleri
    if page == "GÃ¶sterge Paneli":
        show_dashboard(bot)
    elif page == "CanlÄ± Grafikler":
        show_live_charts(bot)
    elif page == "Sinyal Ä°zleme":
        show_signal_monitor(bot)
    elif page == "AÃ§Ä±k Pozisyonlar":
        show_open_positions(bot)
    elif page == "MT5 AyarlarÄ±":
        show_mt5_settings(bot)
    elif page == "Bot AyarlarÄ±":
        show_bot_settings(bot)
    elif page == "Performans":
        show_performance(bot)
    elif page == "API YÃ¶netimi":
        show_api_management(bot)

def initialize_bot():
    """
    Bot Ã¶rneÄŸini baÅŸlat
    
    Returns:
        ForexTradingBot: Bot Ã¶rneÄŸi veya None
    """
    try:
        # ForexTradingBot modÃ¼lÃ¼nÃ¼ dinamik olarak iÃ§e aktar
        sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
        
        from main import ForexTradingBot
        
        # Bot Ã¶rneÄŸini oluÅŸtur
        bot = ForexTradingBot()
        
        return bot
    except Exception as e:
        logger.error(f"Bot baÅŸlatma hatasÄ±: {e}", exc_info=True)
        st.error(f"Bot baÅŸlatÄ±lamadÄ±: {e}")
        return None

def start_bot(bot):
    """
    Bot'u baÅŸlat
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    try:
        # Bot'u baÅŸlatma
        bot.start()
        st.session_state.bot_running = True
        st.session_state.last_update = datetime.now()
        
        # Yenileme iÃ§in thread baÅŸlat
        if not hasattr(st.session_state, 'refresh_thread') or not st.session_state.refresh_thread.is_alive():
            st.session_state.refresh_thread = threading.Thread(target=background_refresh, args=(bot,))
            st.session_state.refresh_thread.daemon = True
            st.session_state.refresh_thread.start()
    except Exception as e:
        logger.error(f"Bot baÅŸlatma hatasÄ±: {e}", exc_info=True)
        st.error(f"Bot baÅŸlatma hatasÄ±: {e}")

def stop_bot(bot):
    """
    Bot'u durdur
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    try:
        # Bot'u durdur
        bot.stop()
        st.session_state.bot_running = False
        st.session_state.last_update = datetime.now()
    except Exception as e:
        logger.error(f"Bot durdurma hatasÄ±: {e}", exc_info=True)
        st.error(f"Bot durdurma hatasÄ±: {e}")

def refresh_data(bot):
    """
    Verileri yenile
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    try:
        # AÃ§Ä±k pozisyonlarÄ± gÃ¼ncelle
        positions_df = bot.broker.get_positions()
        st.session_state.open_positions = positions_df.to_dict('records') if not positions_df.empty else []
        
        # Sinyal geÃ§miÅŸini gÃ¼ncelle
        st.session_state.signals = bot.signal_generator.get_signal_history(20)
        
        # Son gÃ¼ncelleme zamanÄ±nÄ± ayarla
        st.session_state.last_update = datetime.now()
    except Exception as e:
        logger.error(f"Veri yenileme hatasÄ±: {e}", exc_info=True)

def background_refresh(bot):
    """
    Arkaplan veri yenileme
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    try:
        while st.session_state.bot_running:
            # Verileri yenile
            refresh_data(bot)
            
            # 60 saniye bekle
            time.sleep(60)
    except Exception as e:
        logger.error(f"Arkaplan yenileme hatasÄ±: {e}", exc_info=True)

def show_dashboard(bot):
    """
    GÃ¶sterge paneli sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("GÃ¶sterge Paneli")
    
    # Durum Ã¶zeti
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("Bot Durumu")
        
        bot_status = "Ã‡alÄ±ÅŸÄ±yor" if st.session_state.bot_running else "Durduruldu"
        status_color = "green" if st.session_state.bot_running else "red"
        
        st.markdown(f"<div style='padding: 10px; border-radius: 5px; background-color: {status_color}; color: white;'>"
                   f"<h3 style='margin: 0; text-align: center;'>{bot_status}</h3>"
                   f"</div>", unsafe_allow_html=True)
        
        # MT5 baÄŸlantÄ± durumu
        mt5_connected = bot.broker.connected
        mt5_status = "BaÄŸlÄ±" if mt5_connected else "BaÄŸlÄ± DeÄŸil"
        mt5_color = "green" if mt5_connected else "red"
        
        st.markdown(f"<div style='margin-top: 10px; padding: 10px; border-radius: 5px; "
                   f"background-color: {mt5_color}; color: white;'>"
                   f"<h4 style='margin: 0; text-align: center;'>MT5: {mt5_status}</h4>"
                   f"</div>", unsafe_allow_html=True)
        
        # Telegram baÄŸlantÄ± durumu
        telegram_connected = hasattr(bot.telegram_bot, 'connected') and bot.telegram_bot.connected
        telegram_status = "BaÄŸlÄ±" if telegram_connected else "BaÄŸlÄ± DeÄŸil"
        telegram_color = "green" if telegram_connected else "red"
        
        st.markdown(f"<div style='margin-top: 10px; padding: 10px; border-radius: 5px; "
                   f"background-color: {telegram_color}; color: white;'>"
                   f"<h4 style='margin: 0; text-align: center;'>Telegram: {telegram_status}</h4>"
                   f"</div>", unsafe_allow_html=True)
    
    with col2:
        st.subheader("Ä°ÅŸlem Ã–zeti")
        
        # AÃ§Ä±k pozisyon sayÄ±sÄ±
        open_count = len(st.session_state.open_positions)
        
        # Bekleyen sinyal sayÄ±sÄ±
        pending_signals = sum(1 for s in st.session_state.signals if s.get("status") == "pending")
        
        # GÃ¼nlÃ¼k iÅŸlem sayÄ±sÄ±
        today = datetime.now().date()
        daily_trades = sum(1 for p in st.session_state.open_positions 
                          if pd.to_datetime(p.get("time")).date() == today)
        
        # Kart stilinde gÃ¶ster
        st.markdown(f"<div style='padding: 10px; border-radius: 5px; background-color: #3498db; color: white;'>"
                   f"<h4 style='margin: 0;'>AÃ§Ä±k Pozisyonlar: {open_count}</h4>"
                   f"</div>", unsafe_allow_html=True)
        
        st.markdown(f"<div style='margin-top: 10px; padding: 10px; border-radius: 5px; "
                   f"background-color: #f39c12; color: white;'>"
                   f"<h4 style='margin: 0;'>Bekleyen Sinyaller: {pending_signals}</h4>"
                   f"</div>", unsafe_allow_html=True)
        
        st.markdown(f"<div style='margin-top: 10px; padding: 10px; border-radius: 5px; "
                   f"background-color: #2ecc71; color: white;'>"
                   f"<h4 style='margin: 0;'>BugÃ¼nkÃ¼ Ä°ÅŸlemler: {daily_trades}</h4>"
                   f"</div>", unsafe_allow_html=True)
    
    with col3:
        st.subheader("Risk Durumu")
        
        # Risk Ã¶zeti
        risk_summary = bot.risk_manager.get_risk_summary()
        
        # GÃ¼nlÃ¼k risk
        daily_risk = risk_summary.get("daily_risk", 0)
        max_daily_risk = risk_summary.get("max_daily_risk", 5)
        daily_risk_percent = (daily_risk / max_daily_risk) * 100 if max_daily_risk > 0 else 0
        
        # HaftalÄ±k risk
        weekly_risk = risk_summary.get("weekly_risk", 0)
        max_weekly_risk = risk_summary.get("max_weekly_risk", 10)
        weekly_risk_percent = (weekly_risk / max_weekly_risk) * 100 if max_weekly_risk > 0 else 0
        
        # Ä°lerleme Ã§ubuklarÄ± olarak gÃ¶ster
        st.markdown("**GÃ¼nlÃ¼k Risk KullanÄ±mÄ±:**")
        st.progress(min(daily_risk_percent / 100, 1.0))
        st.markdown(f"{daily_risk:.2f}% / {max_daily_risk:.2f}%")
        
        st.markdown("**HaftalÄ±k Risk KullanÄ±mÄ±:**")
        st.progress(min(weekly_risk_percent / 100, 1.0))
        st.markdown(f"{weekly_risk:.2f}% / {max_weekly_risk:.2f}%")
        
        # Ortalama iÅŸlem riski
        avg_risk = risk_summary.get("avg_risk_per_trade", 0)
        st.markdown(f"**Ä°ÅŸlem BaÅŸÄ±na Ort. Risk:** {avg_risk:.2f}%")
    
    # Grafik ve aktivite bÃ¶lÃ¼mleri
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("Son Fiyat Hareketleri")
        
        # Sembol seÃ§
        default_symbol = bot.settings.get("symbols", ["EURUSD"])[0]
        selected_symbol = st.selectbox("Sembol:", bot.settings.get("symbols", ["EURUSD"]), index=0)
        
        # Grafik modÃ¼lÃ¼
        chart_module = st.session_state.chart_module
        
        # Mum grafiÄŸi oluÅŸtur
        fig = chart_module.create_candlestick_chart(selected_symbol, "H1", 100)
        
        if fig:
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning(f"{selected_symbol} H1 grafiÄŸi iÃ§in veri bulunamadÄ±.")
    
    with col2:
        st.subheader("Son Aktiviteler")
        
        # Son sinyaller
        if st.session_state.signals:
            for signal in st.session_state.signals[:5]:  # Son 5 sinyal
                symbol = signal.get("symbol", "")
                signal_type = signal.get("signal", "neutral")
                timestamp = signal.get("timestamp", datetime.now())
                probability = signal.get("success_probability", 0)
                status = signal.get("status", "pending")
                
                # Renk belirle
                if signal_type == "buy":
                    color = "buy-signal"
                elif signal_type == "sell":
                    color = "sell-signal"
                else:
                    color = "neutral-signal"
                
                # Kart stilinde gÃ¶ster
                st.markdown(f"<div style='margin-bottom: 10px; padding: 10px; "
                           f"border-radius: 5px; border: 1px solid #ddd;'>"
                           f"<div style='display: flex; justify-content: space-between;'>"
                           f"<span><strong>{symbol}</strong></span>"
                           f"<span class='{color}'>{signal_type.upper()}</span>"
                           f"</div>"
                           f"<div style='display: flex; justify-content: space-between; margin-top: 5px;'>"
                           f"<span>{timestamp.strftime('%H:%M:%S')}</span>"
                           f"<span>OlasÄ±lÄ±k: {probability:.1f}%</span>"
                           f"</div>"
                           f"<div style='text-align: right; margin-top: 5px;'>"
                           f"<span style='background-color: #f1f1f1; padding: 2px 5px; "
                           f"border-radius: 3px;'>{status.capitalize()}</span>"
                           f"</div>"
                           f"</div>", unsafe_allow_html=True)
        else:
            st.info("HenÃ¼z sinyal yok.")
        
        # YaklaÅŸan Ã¶nemli haberler
        st.markdown("---")
        st.subheader("YaklaÅŸan Ã–nemli Haberler")
        
        # TÃ¼m semboller iÃ§in para birimlerini Ã§Ä±kar
        symbols = bot.settings.get("symbols", ["EURUSD"])
        currencies = set()
        
        for symbol in symbols:
            if len(symbol) >= 6:
                currencies.add(symbol[:3])
                currencies.add(symbol[3:6])
        
        # Haber verilerini al
        current_symbol = symbols[0]  # Ä°lk sembolÃ¼ kullan
        analysis_results = bot.analysis_engine.analyze(current_symbol)
        
        if "news" in analysis_results and "next_events" in analysis_results:
            upcoming_events = analysis_results["news"].get("next_events", [])
            
            if upcoming_events:
                for event in upcoming_events[:3]:  # Ä°lk 3 olay
                    currency = event.get("currency", "")
                    event_name = event.get("event", "")
                    event_time = event.get("datetime", datetime.now())
                    impact = event.get("impact", "Low")
                    
                    # Etki rengini belirle
                    impact_color = "#28a745" if impact == "High" else "#ffc107" if impact == "Medium" else "#6c757d"
                    
                    # Kart stilinde gÃ¶ster
                    st.markdown(f"<div style='margin-bottom: 10px; padding: 10px; "
                               f"border-radius: 5px; border: 1px solid #ddd;'>"
                               f"<div style='display: flex; justify-content: space-between;'>"
                               f"<span><strong>{currency}</strong></span>"
                               f"<span style='color: {impact_color};'>{impact} Etki</span>"
                               f"</div>"
                               f"<div style='margin-top: 5px;'>"
                               f"{event_name}"
                               f"</div>"
                               f"<div style='text-align: right; margin-top: 5px;'>"
                               f"<span style='background-color: #f1f1f1; padding: 2px 5px; "
                               f"border-radius: 3px;'>{event_time.strftime('%d.%m.%Y %H:%M')}</span>"
                               f"</div>"
                               f"</div>", unsafe_allow_html=True)
            else:
                st.info("YaklaÅŸan Ã¶nemli haber yok.")
        else:
            st.info("Haber verisi alÄ±namÄ±yor.")

def show_live_charts(bot):
    """
    CanlÄ± grafikler sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("CanlÄ± Grafikler")
    
    # Sembol ve zaman dilimi seÃ§imi
    col1, col2 = st.columns(2)
    
    with col1:
        selected_symbol = st.selectbox("Sembol:", bot.settings.get("symbols", ["EURUSD"]))
    
    with col2:
        timeframe_options = bot.settings.get("timeframes", ["M5", "M15", "H1", "H4", "D1"])
        selected_timeframe = st.selectbox("Zaman Dilimi:", timeframe_options)
    
    # GÃ¶sterge seÃ§imi
    indicators = st.multiselect(
        "GÃ¶stergeler:",
        ["Moving Average", "Bollinger Bands", "RSI", "MACD", "Stochastic", "Ichimoku"],
        default=["Moving Average", "RSI"]
    )
    
    # Grafik oluÅŸturma butonu
    if st.button("Grafik OluÅŸtur"):
        with st.spinner("Grafik hazÄ±rlanÄ±yor..."):
            chart_module = st.session_state.chart_module
            
            if indicators:
                # Teknik gÃ¶stergeli grafik
                fig = chart_module.create_technical_chart(
                    selected_symbol, 
                    selected_timeframe, 
                    indicators
                )
            else:
                # Basit mum grafiÄŸi
                fig = chart_module.create_candlestick_chart(
                    selected_symbol, 
                    selected_timeframe
                )
            
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning(f"{selected_symbol} {selected_timeframe} grafiÄŸi iÃ§in veri bulunamadÄ±.")
    
    # Ã‡oklu zaman dilimi gÃ¶rÃ¼nÃ¼mÃ¼
    st.markdown("---")
    st.subheader("Ã‡oklu Zaman Dilimi GÃ¶rÃ¼nÃ¼mÃ¼")
    
    multi_symbol = st.selectbox("Sembol:", bot.settings.get("symbols", ["EURUSD"]), key="multi_symbol")
    
    if st.button("Ã‡oklu Grafikler OluÅŸtur"):
        with st.spinner("Grafikler hazÄ±rlanÄ±yor..."):
            chart_module = st.session_state.chart_module
            
            # Ã‡oklu zaman dilimi grafikleri
            timeframes = ["M15", "H1", "H4", "D1"]
            charts = chart_module.create_multi_timeframe_chart(multi_symbol, timeframes)
            
            if charts:
                # Grafikleri gÃ¶ster
                for tf, fig in charts.items():
                    st.subheader(f"{multi_symbol} - {tf}")
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning(f"{multi_symbol} iÃ§in Ã§oklu zaman dilimi grafikleri oluÅŸturulamadÄ±.")
    
    # KarÅŸÄ±laÅŸtÄ±rma grafiÄŸi
    st.markdown("---")
    st.subheader("Sembol KarÅŸÄ±laÅŸtÄ±rma GrafiÄŸi")
    
    compare_symbols = st.multiselect(
        "KarÅŸÄ±laÅŸtÄ±rÄ±lacak Semboller:",
        bot.settings.get("symbols", ["EURUSD", "GBPUSD", "USDJPY", "XAUUSD"]),
        default=bot.settings.get("symbols", ["EURUSD", "GBPUSD"])[:2]
    )
    
    compare_timeframe = st.selectbox(
        "Zaman Dilimi:", 
        ["H1", "H4", "D1"], 
        index=0,
        key="compare_timeframe"
    )
    
    if st.button("KarÅŸÄ±laÅŸtÄ±rma GrafiÄŸi OluÅŸtur"):
        if len(compare_symbols) >= 2:
            with st.spinner("KarÅŸÄ±laÅŸtÄ±rma grafiÄŸi hazÄ±rlanÄ±yor..."):
                chart_module = st.session_state.chart_module
                
                # KarÅŸÄ±laÅŸtÄ±rma grafiÄŸi
                fig = chart_module.create_comparison_chart(
                    compare_symbols,
                    compare_timeframe
                )
                
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("KarÅŸÄ±laÅŸtÄ±rma grafiÄŸi oluÅŸturulamadÄ±.")
        else:
            st.warning("KarÅŸÄ±laÅŸtÄ±rma iÃ§in en az 2 sembol seÃ§melisiniz.")

def show_signal_monitor(bot):
    """
    Sinyal izleme sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("Sinyal Ä°zleme")
    
    # Manuel sinyal oluÅŸturma
    with st.expander("Manuel Sinyal Analizi", expanded=False):
        st.subheader("Manuel Sinyal Analizi")
        
        # Sembol seÃ§imi
        col1, col2 = st.columns(2)
        
        with col1:
            selected_symbol = st.selectbox("Sembol:", bot.settings.get("symbols", ["EURUSD"]))
        
        with col2:
            timeframe_options = ["M15", "H1", "H4", "D1"]
            selected_timeframes = st.multiselect(
                "Zaman Dilimleri:",
                timeframe_options,
                default=["H1", "H4"]
            )
        
        if st.button("Analiz Et"):
            if not selected_timeframes:
                st.warning("En az bir zaman dilimi seÃ§in.")
            else:
                with st.spinner("Analiz yapÄ±lÄ±yor..."):
                    try:
                        # Analiz yap
                        analysis_results = bot.analysis_engine.analyze(selected_symbol, selected_timeframes)
                        
                        # AI tahmin yap
                        prediction_results = bot.ai_predictor.predict(selected_symbol)
                        
                        # Sinyal oluÅŸtur
                        signal = bot.signal_generator.generate_signal(
                            selected_symbol,
                            analysis_results,
                            prediction_results
                        )
                        
                        if signal:
                            # Sinyal detaylarÄ±nÄ± gÃ¶ster
                            st.success("Sinyal baÅŸarÄ±yla oluÅŸturuldu!")
                            
                            # Sinyal detaylarÄ±
                            signal_type = signal.get("signal", "neutral")
                            signal_color = "green" if signal_type == "buy" else "red" if signal_type == "sell" else "gray"
                            
                            st.markdown(f"<div style='padding: 15px; background-color: {signal_color}; "
                                      f"color: white; border-radius: 5px; margin-bottom: 20px;'>"
                                      f"<h3 style='margin: 0;'>{selected_symbol}: {signal_type.upper()}</h3>"
                                      f"</div>", unsafe_allow_html=True)
                            
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("GiriÅŸ FiyatÄ±", f"{signal.get('entry_price', 0):.5f}")
                            
                            with col2:
                                st.metric("Stop Loss", f"{signal.get('stop_loss', 0):.5f}")
                            
                            with col3:
                                st.metric("Take Profit", f"{signal.get('take_profit', 0):.5f}")
                            
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("BaÅŸarÄ± OlasÄ±lÄ±ÄŸÄ±", f"{signal.get('success_probability', 0):.1f}%")
                            
                            with col2:
                                st.metric("Risk/Ã–dÃ¼l", f"{signal.get('risk_reward', 0):.2f}")
                            
                            with col3:
                                st.metric("Sinyal GÃ¼cÃ¼", f"{signal.get('strength', 0):.1f}%")
                            
                            # Risk hesapla
                            risk_params = bot.risk_manager.calculate_risk_params(signal)
                            
                            st.markdown("---")
                            st.subheader("Risk Parametreleri")
                            
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                st.metric("Lot", f"{risk_params.get('lot_size', 0.01):.2f}")
                            
                            with col2:
                                st.metric("Risk TutarÄ±", f"{risk_params.get('risk_amount', 0):.2f}")
                            
                            with col3:
                                st.metric("Risk YÃ¼zdesi", f"{risk_params.get('risk_percent', 0):.2f}%")
                            
                            with col4:
                                st.metric("SL Mesafesi", f"{risk_params.get('sl_pips', 0)} pip")
                            
                            # Grafik gÃ¶ster
                            st.markdown("---")
                            st.subheader("Analiz GrafiÄŸi")
                            
                            chart_module = st.session_state.chart_module
                            fig = chart_module.create_analysis_chart(
                                selected_symbol,
                                "H1",
                                analysis_results["timeframes"]["H1"]["summary"] if "H1" in analysis_results["timeframes"] else {}
                            )
                            
                            if fig:
                                st.plotly_chart(fig, use_container_width=True)
                            
                            # Ä°ÅŸlem onayÄ±
                            st.markdown("---")
                            
                            if st.button("Ä°ÅŸlemi Onayla"):
                                # Pozisyon aÃ§Ä±labilir mi kontrol et
                                can_open, reason = bot.risk_manager.can_open_position(signal)
                                
                                if can_open:
                                    with st.spinner("Ä°ÅŸlem aÃ§Ä±lÄ±yor..."):
                                        # Ä°ÅŸlemi aÃ§
                                        result = bot.broker.open_position(
                                            symbol=signal.get("symbol"),
                                            order_type=signal.get("signal"),
                                            volume=risk_params.get("lot_size", 0.01),
                                            stop_loss=signal.get("stop_loss"),
                                            take_profit=signal.get("take_profit"),
                                            comment="Manuel sinyal"
                                        )
                                        
                                        if "error" in result:
                                            st.error(f"Ä°ÅŸlem aÃ§Ä±lamadÄ±: {result['error']}")
                                        else:
                                            st.success(f"Ä°ÅŸlem baÅŸarÄ±yla aÃ§Ä±ldÄ±! Ticket: {result.get('ticket')}")
                                            
                                            # Sinyali gÃ¼ncelle
                                            bot.signal_generator.update_signal_status(
                                                signal.get("id"),
                                                "executed",
                                                execution_details=result
                                            )
                                            
                                            # Risk geÃ§miÅŸini gÃ¼ncelle
                                            trade_data = {
                                                "symbol": signal.get("symbol"),
                                                "signal": signal.get("signal"),
                                                "lot_size": risk_params.get("lot_size", 0.01),
                                                "risk_amount": risk_params.get("risk_amount", 0)
                                            }
                                            bot.risk_manager.update_risk_history(trade_data)
                                            
                                            # Verileri yenile
                                            refresh_data(bot)
                                else:
                                    st.error(f"Ä°ÅŸlem aÃ§Ä±lamÄ±yor: {reason}")
                        else:
                            st.warning("Sinyal oluÅŸturulamadÄ±. Yetersiz analiz sonuÃ§larÄ± veya nÃ¶tr sinyal.")
                    except Exception as e:
                        st.error(f"Analiz sÄ±rasÄ±nda hata: {str(e)}")
    
    # Sinyal geÃ§miÅŸi
    st.markdown("---")
    st.subheader("Sinyal GeÃ§miÅŸi")
    
    if "signals" in st.session_state and st.session_state.signals:
        # Tablo baÅŸlÄ±klarÄ±
        columns = st.columns([1.5, 0.8, 1, 0.8, 0.8, 1, 1])
        columns[0].markdown("<strong>Sembol</strong>", unsafe_allow_html=True)
        columns[1].markdown("<strong>Sinyal</strong>", unsafe_allow_html=True)
        columns[2].markdown("<strong>Zaman</strong>", unsafe_allow_html=True)
        columns[3].markdown("<strong>GiriÅŸ</strong>", unsafe_allow_html=True)
        columns[4].markdown("<strong>R/Ã–</strong>", unsafe_allow_html=True)
        columns[5].markdown("<strong>OlasÄ±lÄ±k</strong>", unsafe_allow_html=True)
        columns[6].markdown("<strong>Durum</strong>", unsafe_allow_html=True)
        
        st.markdown("<hr style='margin: 5px 0; padding: 0;'>", unsafe_allow_html=True)
        
        # Sinyalleri listele
        for signal in st.session_state.signals:
            cols = st.columns([1.5, 0.8, 1, 0.8, 0.8, 1, 1])
            
            # Sinyal detaylarÄ±
            symbol = signal.get("symbol", "")
            signal_type = signal.get("signal", "neutral")
            timestamp = signal.get("timestamp", datetime.now())
            entry_price = signal.get("entry_price", 0)
            risk_reward = signal.get("risk_reward", 0)
            probability = signal.get("success_probability", 0)
            status = signal.get("status", "pending")
            
            # Renkleri belirle
            signal_color = "green" if signal_type == "buy" else "red" if signal_type == "sell" else "gray"
            status_color = "green" if status == "executed" else "red" if status == "rejected" else "orange"
            
            # SÃ¼tunlara verileri ekle
            cols[0].write(symbol)
            cols[1].markdown(f"<span style='color: {signal_color}; font-weight: bold;'>{signal_type.upper()}</span>", unsafe_allow_html=True)
            cols[2].write(timestamp.strftime("%d.%m %H:%M"))
            cols[3].write(f"{entry_price:.5f}")
            cols[4].write(f"{risk_reward:.2f}")
            cols[5].write(f"{probability:.1f}%")
            cols[6].markdown(f"<span style='color: {status_color};'>{status.capitalize()}</span>", unsafe_allow_html=True)
            
            st.markdown("<hr style='margin: 5px 0; padding: 0;'>", unsafe_allow_html=True)
            
            # Sinyal detaylarÄ± (tÄ±klama ile aÃ§Ä±lan)
            with st.expander(f"Detaylar - {symbol} ({timestamp.strftime('%d.%m.%Y %H:%M')})"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**Sinyal DetaylarÄ±**")
                    st.write(f"Stop Loss: {signal.get('stop_loss', 0):.5f}")
                    st.write(f"Take Profit: {signal.get('take_profit', 0):.5f}")
                    st.write(f"Sinyal GÃ¼cÃ¼: {signal.get('strength', 0):.1f}%")
                    st.write(f"Anahtar Zaman Dilimleri: {', '.join(signal.get('timeframes', []))}")
                
                with col2:
                    st.markdown("**Ä°ÅŸlem DetaylarÄ±**" if status == "executed" else "**Sinyal Durumu**")
                    
                    if status == "executed" and "execution_details" in signal:
                        execution = signal.get("execution_details", {})
                        st.write(f"Ticket: {execution.get('ticket', 'N/A')}")
                        st.write(f"Ä°ÅŸlem FiyatÄ±: {execution.get('price', 0):.5f}")
                        st.write(f"Lot: {execution.get('volume', 0):.2f}")
                        st.write(f"Ä°ÅŸlem ZamanÄ±: {execution.get('time', 'N/A')}")
                    else:
                        st.write(f"Durum: {status.capitalize()}")
                        st.write(f"OluÅŸturulma: {timestamp.strftime('%d.%m.%Y %H:%M:%S')}")
    else:
        st.info("HenÃ¼z sinyal yok.")

def show_open_positions(bot):
    """
    AÃ§Ä±k pozisyonlar sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("AÃ§Ä±k Pozisyonlar")
    
    # PozisyonlarÄ± yenile
    if st.button("PozisyonlarÄ± Yenile"):
        with st.spinner("Pozisyonlar yenileniyor..."):
            refresh_data(bot)
            st.success("Pozisyonlar yenilendi!")
    
    # AÃ§Ä±k pozisyonlarÄ± gÃ¶ster
    if "open_positions" in st.session_state and st.session_state.open_positions:
        # Tablo baÅŸlÄ±klarÄ±
        columns = st.columns([1.5, 0.8, 1, 0.8, 0.8, 0.8, 0.8, 1])
        columns[0].markdown("<strong>Sembol</strong>", unsafe_allow_html=True)
        columns[1].markdown("<strong>YÃ¶n</strong>", unsafe_allow_html=True)
        columns[2].markdown("<strong>Lot</strong>", unsafe_allow_html=True)
        columns[3].markdown("<strong>AÃ§Ä±lÄ±ÅŸ</strong>", unsafe_allow_html=True)
        columns[4].markdown("<strong>SL</strong>", unsafe_allow_html=True)
        columns[5].markdown("<strong>TP</strong>", unsafe_allow_html=True)
        columns[6].markdown("<strong>Kar/Zarar</strong>", unsafe_allow_html=True)
        columns[7].markdown("<strong>Ä°ÅŸlemler</strong>", unsafe_allow_html=True)
        
        st.markdown("<hr style='margin: 5px 0; padding: 0;'>", unsafe_allow_html=True)
        
        # PozisyonlarÄ± listele
        for position in st.session_state.open_positions:
            position_id = st.container()
            
            with position_id:
                cols = st.columns([1.5, 0.8, 1, 0.8, 0.8, 0.8, 0.8, 1])
                
                # Pozisyon detaylarÄ±
                symbol = position.get("symbol", "")
                direction = position.get("direction", "")
                volume = position.get("volume", 0)
                open_price = position.get("price_open", 0)
                sl = position.get("sl", 0)
                tp = position.get("tp", 0)
                profit = position.get("profit", 0)
                ticket = position.get("ticket", 0)
                
                # Renkleri belirle
                direction_color = "green" if direction == "BUY" else "red"
                profit_color = "green" if profit > 0 else "red" if profit < 0 else "gray"
                
                # SÃ¼tunlara verileri ekle
                cols[0].write(symbol)
                cols[1].markdown(f"<span style='color: {direction_color}; font-weight: bold;'>{direction}</span>", unsafe_allow_html=True)
                cols[2].write(f"{volume:.2f}")
                cols[3].write(f"{open_price:.5f}")
                cols[4].write(f"{sl:.5f}" if sl > 0 else "---")
                cols[5].write(f"{tp:.5f}" if tp > 0 else "---")
                cols[6].markdown(f"<span style='color: {profit_color}; font-weight: bold;'>{profit:.2f}</span>", unsafe_allow_html=True)
                
                # Ä°ÅŸlem butonlarÄ±
                close_button = cols[7].button("Kapat", key=f"close_{ticket}")
                
                if close_button:
                    with st.spinner(f"Pozisyon kapatÄ±lÄ±yor ({ticket})..."):
                        result = bot.broker.close_position(ticket)
                        
                        if "error" in result:
                            st.error(f"Pozisyon kapatÄ±lamadÄ±: {result['error']}")
                        else:
                            st.success(f"Pozisyon baÅŸarÄ±yla kapatÄ±ldÄ±! Kar/Zarar: {result.get('profit', 0):.2f}")
                            
                            # PozisyonlarÄ± yenile
                            refresh_data(bot)
                
                st.markdown("<hr style='margin: 5px 0; padding: 0;'>", unsafe_allow_html=True)
                
                # Pozisyon detaylarÄ± (tÄ±klama ile aÃ§Ä±lan)
                with st.expander(f"Detaylar - {symbol} (Ticket: {ticket})"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**Pozisyon DetaylarÄ±**")
                        st.write(f"Ticket: {ticket}")
                        st.write(f"AÃ§Ä±lÄ±ÅŸ ZamanÄ±: {pd.to_datetime(position.get('time')).strftime('%d.%m.%Y %H:%M:%S')}")
                        st.write(f"Komisyon: {position.get('commission', 0):.2f}")
                        st.write(f"Swap: {position.get('swap', 0):.2f}")
                    
                    with col2:
                        st.markdown("**Pozisyon DeÄŸiÅŸtir**")
                        
                        # SL/TP deÄŸiÅŸtirme formu
                        new_sl = st.number_input("Yeni Stop Loss:", value=float(sl) if sl > 0 else 0.0, format="%.5f", key=f"sl_{ticket}")
                        new_tp = st.number_input("Yeni Take Profit:", value=float(tp) if tp > 0 else 0.0, format="%.5f", key=f"tp_{ticket}")
                        
                        if st.button("DeÄŸiÅŸiklikleri Uygula", key=f"modify_{ticket}"):
                            with st.spinner("Pozisyon deÄŸiÅŸtiriliyor..."):
                                result = bot.broker.modify_position(ticket, new_sl, new_tp)
                                
                                if "error" in result:
                                    st.error(f"Pozisyon deÄŸiÅŸtirilemedi: {result['error']}")
                                else:
                                    st.success("Pozisyon baÅŸarÄ±yla deÄŸiÅŸtirildi!")
                                    
                                    # PozisyonlarÄ± yenile
                                    refresh_data(bot)
    else:
        st.info("AÃ§Ä±k pozisyon yok.")
    
    # Ä°ÅŸlem limitleri
    st.markdown("---")
    st.subheader("Ä°ÅŸlem Limitleri")
    
    # Pozisyon limitlerini kontrol et
    limits = bot.risk_manager.check_position_limits()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Toplam aÃ§Ä±k pozisyon sayÄ±sÄ±
        max_positions = limits.get("max_positions", 0)
        current_positions = limits.get("current_open_positions", 0)
        
        st.markdown(f"**AÃ§Ä±k Pozisyonlar:** {current_positions} / {max_positions}")
        st.progress(min(current_positions / max_positions, 1.0) if max_positions > 0 else 0.0)
    
    with col2:
        # Risk durumu
        risk_summary = bot.risk_manager.get_risk_summary()
        
        daily_risk = risk_summary.get("daily_risk", 0)
        max_daily_risk = risk_summary.get("max_daily_risk", 5)
        
        st.markdown(f"**GÃ¼nlÃ¼k Risk:** {daily_risk:.2f}% / {max_daily_risk:.2f}%")
        st.progress(min(daily_risk / max_daily_risk, 1.0) if max_daily_risk > 0 else 0.0)
    
    with col3:
        # Sembol baÅŸÄ±na pozisyon sayÄ±sÄ±
        positions_per_symbol = limits.get("positions_per_symbol", {})
        max_per_symbol = limits.get("max_positions_per_symbol", 0)
        
        if positions_per_symbol:
            highest_symbol = max(positions_per_symbol, key=positions_per_symbol.get)
            highest_count = positions_per_symbol[highest_symbol]
            
            st.markdown(f"**En Ã§ok: {highest_symbol}** {highest_count} / {max_per_symbol}")
            st.progress(min(highest_count / max_per_symbol, 1.0) if max_per_symbol > 0 else 0.0)
        else:
            st.markdown(f"**Sembol BaÅŸÄ±na Pozisyon:** 0 / {max_per_symbol}")
            st.progress(0.0)
    
    # Hesap Ã¶zeti
    st.markdown("---")
    st.subheader("Hesap Ã–zeti")
    
    account_info = bot.broker.get_account_info()
    
    if account_info:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Bakiye", f"{account_info.get('balance', 0):.2f} {account_info.get('currency', 'USD')}")
        
        with col2:
            equity = account_info.get('equity', 0)
            balance = account_info.get('balance', 0)
            profit_loss = equity - balance
            
            st.metric("VarlÄ±k", f"{equity:.2f}", f"{profit_loss:+.2f}")
        
        with col3:
            st.metric("Serbest Marjin", f"{account_info.get('free_margin', 0):.2f}")
        
        with col4:
            st.metric("Marjin Seviyesi", f"{account_info.get('margin_level', 0):.2f}%")
    else:
        st.warning("Hesap bilgileri alÄ±namÄ±yor!")

def show_mt5_settings(bot):
    """
    MT5 ayarlarÄ± sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("MetaTrader 5 AyarlarÄ±")
    
    # MT5 baÄŸlantÄ± durumu
    mt5_connected = bot.broker.connected
    mt5_status = "BaÄŸlÄ±" if mt5_connected else "BaÄŸlÄ± DeÄŸil"
    mt5_color = "success-box" if mt5_connected else "error-box"
    
    st.markdown(f"<div class='{mt5_color}'>MT5 Durumu: {mt5_status}</div>", unsafe_allow_html=True)
    
    # MT5 ayarlarÄ± formu
    with st.form("mt5_settings_form"):
        st.subheader("MT5 BaÄŸlantÄ± AyarlarÄ±")
        
        # Mevcut ayarlarÄ± al
        mt5_settings = bot.settings.get("mt5", {})
        mt5_credentials = bot.settings.api_keys.get("mt5", {})
        
        # MT5 yolu
        mt5_path = st.text_input(
            "MT5 Yolu:",
            value=mt5_settings.get("path", "C:/Program Files/MetaTrader 5/terminal64.exe")
        )
        
        # Hesap bilgileri
        col1, col2, col3 = st.columns(3)
        
        with col1:
            mt5_login = st.text_input("Hesap NumarasÄ±:", value=mt5_credentials.get("login", ""))
        
        with col2:
            mt5_password = st.text_input("Åžifre:", type="password", value=mt5_credentials.get("password", ""))
        
        with col3:
            mt5_server = st.text_input("Sunucu:", value=mt5_credentials.get("server", ""))
        
        # BaÄŸlantÄ± zaman aÅŸÄ±mÄ±
        mt5_timeout = st.number_input(
            "BaÄŸlantÄ± Zaman AÅŸÄ±mÄ± (ms):",
            min_value=1000,
            max_value=60000,
            value=mt5_settings.get("timeout", 60000),
            step=1000
        )
        
        # GerÃ§ek iÅŸlem izni
        mt5_real_trading = st.checkbox(
            "GerÃ§ek Hesapta Ä°ÅŸlem Ä°zni",
            value=mt5_settings.get("enable_real_trading", False)
        )
        
        if not mt5_real_trading:
            st.markdown(
                "<div class='warning-box'>Bu seÃ§enek devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±ÄŸÄ±nda, "
                "bot gerÃ§ek hesaplarda iÅŸlem yapmayacaktÄ±r.</div>",
                unsafe_allow_html=True
            )
        else:
            st.markdown(
                "<div class='warning-box'><strong>DÄ°KKAT:</strong> Bu seÃ§enek etkinleÅŸtirildiÄŸinde, "
                "bot gerÃ§ek hesabÄ±nÄ±zda iÅŸlem yapabilir!</div>",
                unsafe_allow_html=True
            )
        
        # BaÄŸlan/BaÄŸlantÄ±yÄ± Kes butonlarÄ±
        col1, col2 = st.columns(2)
        
        with col1:
            connect_button = st.form_submit_button("BaÄŸlan")
        
        with col2:
            disconnect_button = st.form_submit_button("BaÄŸlantÄ±yÄ± Kes")
    
    # Form iÅŸlemleri
    if connect_button:
        with st.spinner("MT5'e baÄŸlanÄ±lÄ±yor..."):
            # AyarlarÄ± gÃ¼ncelle
            bot.settings.set_setting("mt5.path", mt5_path)
            bot.settings.set_setting("mt5.timeout", mt5_timeout)
            bot.settings.set_setting("mt5.enable_real_trading", mt5_real_trading)
            
            # API anahtarlarÄ±nÄ± gÃ¼ncelle
            bot.settings.set_api_key("mt5.login", mt5_login)
            bot.settings.set_api_key("mt5.password", mt5_password)
            bot.settings.set_api_key("mt5.server", mt5_server)
            
            # BaÄŸlantÄ±yÄ± dene
            success = bot.broker.connect()
            
            if success:
                st.success("MT5'e baÅŸarÄ±yla baÄŸlandÄ±!")
                # SayfayÄ± yenile
                st.experimental_rerun()
            else:
                st.error("MT5 baÄŸlantÄ±sÄ± baÅŸarÄ±sÄ±z. AyarlarÄ± kontrol edin.")
    
    if disconnect_button:
        with st.spinner("MT5 baÄŸlantÄ±sÄ± kesiliyor..."):
            success = bot.broker.disconnect()
            
            if success:
                st.success("MT5 baÄŸlantÄ±sÄ± kesildi!")
                # SayfayÄ± yenile
                st.experimental_rerun()
            else:
                st.error("MT5 baÄŸlantÄ±sÄ±nÄ± kesme baÅŸarÄ±sÄ±z.")
    
    # Semboller ve Ã¶zellikleri
    st.markdown("---")
    st.subheader("Sembol AyarlarÄ±")
    
    # Sembol ayarlarÄ± formu
    with st.form("symbol_settings_form"):
        # Mevcut semboller
        current_symbols = bot.settings.get("symbols", ["EURUSD", "GBPUSD", "XAUUSD"])
        symbols_str = ", ".join(current_symbols)
        
        new_symbols = st.text_input(
            "Ä°ÅŸlem Sembolleri (virgÃ¼lle ayrÄ±lmÄ±ÅŸ):",
            value=symbols_str
        )
        
        # Kaydet butonu
        save_symbols = st.form_submit_button("Sembolleri Kaydet")
    
    # Sembol ayarlarÄ±nÄ± kaydet
    if save_symbols:
        try:
            # Sembolleri ayÄ±r ve temizle
            symbols_list = [s.strip() for s in new_symbols.split(",") if s.strip()]
            
            if not symbols_list:
                st.error("En az bir sembol belirtmelisiniz!")
            else:
                # Sembolleri gÃ¼ncelle
                bot.settings.set_setting("symbols", symbols_list)
                st.success("Semboller baÅŸarÄ±yla gÃ¼ncellendi!")
        except Exception as e:
            st.error(f"Semboller gÃ¼ncellenirken hata: {str(e)}")
    
    # Sembol bilgilerini gÃ¶ster
    if mt5_connected:
        try:
            # Sembol bilgilerini al
            symbols_info = bot.broker.get_symbols_info()
            
            if not symbols_info.empty:
                # Mevcut sembolleri filtrele
                current_symbols = bot.settings.get("symbols", [])
                filtered_info = symbols_info[symbols_info['name'].isin(current_symbols)]
                
                if not filtered_info.empty:
                    st.markdown("---")
                    st.subheader("Aktif Semboller")
                    
                    # Tablo olarak gÃ¶ster
                    st.dataframe(
                        filtered_info[['name', 'description', 'digits', 'trade_mode', 'volume_min', 'volume_max']],
                        use_container_width=True
                    )
        except Exception as e:
            st.error(f"Sembol bilgileri alÄ±nÄ±rken hata: {str(e)}")
    
    # Son iÅŸlemler
    st.markdown("---")
    st.subheader("Son Ä°ÅŸlemler")
    
    if mt5_connected:
        try:
            # Son iÅŸlemleri al
            trade_history = bot.broker.get_trade_history()
            
            if not trade_history.empty:
                # Son 10 iÅŸlemi gÃ¶ster
                st.dataframe(
                    trade_history.tail(10)[['time', 'symbol', 'direction', 'volume', 'price', 'profit']],
                    use_container_width=True
                )
            else:
                st.info("HenÃ¼z iÅŸlem geÃ§miÅŸi yok.")
        except Exception as e:
            st.error(f"Ä°ÅŸlem geÃ§miÅŸi alÄ±nÄ±rken hata: {str(e)}")

def show_bot_settings(bot):
    """
    Bot ayarlarÄ± sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("Bot AyarlarÄ±")
    
    # Ayarlar tablarÄ±
    tab1, tab2, tab3, tab4 = st.tabs(["Genel Ayarlar", "Sinyal AyarlarÄ±", "Risk AyarlarÄ±", "Telegram AyarlarÄ±"])
    
    with tab1:
        st.subheader("Genel Bot AyarlarÄ±")
        
        # Genel ayarlar formu
        with st.form("general_settings_form"):
            # Mevcut ayarlarÄ± al
            timezone = bot.settings.get("timezone", "Europe/Istanbul")
            scan_interval = bot.settings.get("scan_interval", 60)
            auto_trade_enabled = bot.settings.get("auto_trade_enabled", False)
            auto_trade_threshold = bot.settings.get("auto_trade_threshold", 70)
            news_scanner_enabled = bot.settings.get("news_scanner_enabled", True)
            
            # Zaman dilimi
            timezone_options = [
                "Europe/Istanbul", "Europe/London", "America/New_York", 
                "Asia/Tokyo", "Australia/Sydney", "UTC"
            ]
            timezone = st.selectbox("Zaman Dilimi:", timezone_options, index=timezone_options.index(timezone))
            
            # Tarama aralÄ±ÄŸÄ±
            scan_interval = st.slider(
                "Tarama AralÄ±ÄŸÄ± (saniye):",
                min_value=30,
                max_value=300,
                value=scan_interval,
                step=10
            )
            
            # Otomatik iÅŸlem modu
            auto_trade_enabled = st.checkbox("Otomatik Ä°ÅŸlem Modu", value=auto_trade_enabled)
            
            # Otomatik iÅŸlem eÅŸiÄŸi
            auto_trade_threshold = st.slider(
                "Otomatik Ä°ÅŸlem iÃ§in Minimum BaÅŸarÄ± OlasÄ±lÄ±ÄŸÄ± (%):",
                min_value=50,
                max_value=95,
                value=auto_trade_threshold,
                step=5
            )
            
            # Haber tarayÄ±cÄ±
            news_scanner_enabled = st.checkbox("Haber TarayÄ±cÄ±", value=news_scanner_enabled)
            
            # Zaman dilimleri
            timeframe_options = ["M1", "M5", "M15", "M30", "H1", "H4", "D1", "W1"]
            current_timeframes = bot.settings.get("timeframes", ["M5", "M15", "H1", "H4", "D1"])
            
            selected_timeframes = st.multiselect(
                "KullanÄ±lacak Zaman Dilimleri:",
                timeframe_options,
                default=current_timeframes
            )
            
            # Kaydet butonu
            save_general = st.form_submit_button("Genel AyarlarÄ± Kaydet")
        
        # Genel ayarlarÄ± kaydet
        if save_general:
            with st.spinner("Ayarlar kaydediliyor..."):
                try:
                    # AyarlarÄ± gÃ¼ncelle
                    bot.settings.set_setting("timezone", timezone)
                    bot.settings.set_setting("scan_interval", scan_interval)
                    bot.settings.set_setting("auto_trade_enabled", auto_trade_enabled)
                    bot.settings.set_setting("auto_trade_threshold", auto_trade_threshold)
                    bot.settings.set_setting("news_scanner_enabled", news_scanner_enabled)
                    
                    if selected_timeframes:
                        bot.settings.set_setting("timeframes", selected_timeframes)
                    
                    st.success("Genel ayarlar baÅŸarÄ±yla kaydedildi!")
                except Exception as e:
                    st.error(f"Ayarlar kaydedilirken hata: {str(e)}")
    
    with tab2:
        st.subheader("Sinyal AyarlarÄ±")
        
        # Sinyal ayarlarÄ± formu
        with st.form("signal_settings_form"):
            # Mevcut ayarlarÄ± al
            signal_settings = bot.settings.get("signal", {})
            
            min_probability = signal_settings.get("min_probability", 60)
            auto_trade_threshold = signal_settings.get("auto_trade_threshold", 70)
            min_risk_reward = signal_settings.get("min_risk_reward", 1.5)
            confirmation_timeout = signal_settings.get("confirmation_timeout", 300)
            max_signals_per_day = signal_settings.get("max_signals_per_day", 10)
            
            # Minimum baÅŸarÄ± olasÄ±lÄ±ÄŸÄ±
            min_probability = st.slider(
                "Minimum BaÅŸarÄ± OlasÄ±lÄ±ÄŸÄ± (%):",
                min_value=30,
                max_value=90,
                value=min_probability,
                step=5
            )
            
            # Otomatik iÅŸlem eÅŸiÄŸi
            auto_trade_threshold = st.slider(
                "Otomatik Ä°ÅŸlem EÅŸiÄŸi (%):",
                min_value=50,
                max_value=95,
                value=auto_trade_threshold,
                step=5
            )
            
            # Minimum risk/Ã¶dÃ¼l oranÄ±
            min_risk_reward = st.slider(
                "Minimum Risk/Ã–dÃ¼l OranÄ±:",
                min_value=1.0,
                max_value=3.0,
                value=min_risk_reward,
                step=0.1
            )
            
            # Onay zaman aÅŸÄ±mÄ±
            confirmation_timeout = st.slider(
                "Onay Zaman AÅŸÄ±mÄ± (saniye):",
                min_value=60,
                max_value=600,
                value=confirmation_timeout,
                step=30
            )
            
            # GÃ¼nlÃ¼k maksimum sinyal
            max_signals_per_day = st.slider(
                "GÃ¼nlÃ¼k Maksimum Sinyal SayÄ±sÄ±:",
                min_value=1,
                max_value=20,
                value=max_signals_per_day,
                step=1
            )
            
            # Analiz stratejileri
            st.subheader("Analiz Stratejileri")
            
            # ICT stratejisi
            ict_enabled = st.checkbox(
                "ICT Stratejisi",
                value=bot.settings.get("analysis", {}).get("ict", {}).get("enabled", True)
            )
            
            # SMC stratejisi
            smc_enabled = st.checkbox(
                "SMC Stratejisi",
                value=bot.settings.get("analysis", {}).get("smc", {}).get("enabled", True)
            )
            
            # Price Action stratejisi
            pa_enabled = st.checkbox(
                "Price Action Stratejisi",
                value=bot.settings.get("analysis", {}).get("price_action", {}).get("enabled", True)
            )
            
            # Kaydet butonu
            save_signal = st.form_submit_button("Sinyal AyarlarÄ±nÄ± Kaydet")
        
        # Sinyal ayarlarÄ±nÄ± kaydet
        if save_signal:
            with st.spinner("Ayarlar kaydediliyor..."):
                try:
                    # Sinyal ayarlarÄ±nÄ± gÃ¼ncelle
                    signal_settings = {
                        "min_probability": min_probability,
                        "auto_trade_threshold": auto_trade_threshold,
                        "min_risk_reward": min_risk_reward,
                        "confirmation_timeout": confirmation_timeout,
                        "max_signals_per_day": max_signals_per_day
                    }
                    
                    bot.settings.set_setting("signal", signal_settings)
                    
                    # Analiz stratejilerini gÃ¼ncelle
                    bot.settings.set_setting("analysis.ict.enabled", ict_enabled)
                    bot.settings.set_setting("analysis.smc.enabled", smc_enabled)
                    bot.settings.set_setting("analysis.price_action.enabled", pa_enabled)
                    
                    st.success("Sinyal ayarlarÄ± baÅŸarÄ±yla kaydedildi!")
                except Exception as e:
                    st.error(f"Ayarlar kaydedilirken hata: {str(e)}")
    
    with tab3:
        st.subheader("Risk YÃ¶netim AyarlarÄ±")
        
        # Risk ayarlarÄ± formu
        with st.form("risk_settings_form"):
            # Mevcut ayarlarÄ± al
            risk_settings = bot.settings.get("risk_management", {})
            
            max_risk_percent = risk_settings.get("max_risk_percent", 2.0)
            max_daily_risk_percent = risk_settings.get("max_daily_risk_percent", 5.0)
            max_weekly_risk_percent = risk_settings.get("max_weekly_risk_percent", 10.0)
            max_open_positions = risk_settings.get("max_open_positions", 5)
            max_positions_per_symbol = risk_settings.get("max_positions_per_symbol", 2)
            default_stop_loss_pips = risk_settings.get("default_stop_loss_pips", 50)
            default_take_profit_pips = risk_settings.get("default_take_profit_pips", 100)
            max_lot_size = risk_settings.get("max_lot_size", 1.0)
            
            # Ä°ÅŸlem baÅŸÄ±na maksimum risk
            max_risk_percent = st.slider(
                "Ä°ÅŸlem BaÅŸÄ±na Maksimum Risk (%):",
                min_value=0.1,
                max_value=5.0,
                value=max_risk_percent,
                step=0.1
            )
            
            # GÃ¼nlÃ¼k maksimum risk
            max_daily_risk_percent = st.slider(
                "GÃ¼nlÃ¼k Maksimum Risk (%):",
                min_value=1.0,
                max_value=20.0,
                value=max_daily_risk_percent,
                step=0.5
            )
            
            # HaftalÄ±k maksimum risk
            max_weekly_risk_percent = st.slider(
                "HaftalÄ±k Maksimum Risk (%):",
                min_value=2.0,
                max_value=30.0,
                value=max_weekly_risk_percent,
                step=1.0
            )
            
            # Maksimum aÃ§Ä±k pozisyon sayÄ±sÄ±
            max_open_positions = st.slider(
                "Maksimum AÃ§Ä±k Pozisyon SayÄ±sÄ±:",
                min_value=1,
                max_value=20,
                value=max_open_positions,
                step=1
            )
            
            # Sembol baÅŸÄ±na maksimum pozisyon
            max_positions_per_symbol = st.slider(
                "Sembol BaÅŸÄ±na Maksimum Pozisyon:",
                min_value=1,
                max_value=5,
                value=max_positions_per_symbol,
                step=1
            )
            
            # VarsayÄ±lan SL/TP
            col1, col2 = st.columns(2)
            
            with col1:
                default_stop_loss_pips = st.number_input(
                    "VarsayÄ±lan Stop Loss (pip):",
                    min_value=10,
                    max_value=200,
                    value=default_stop_loss_pips,
                    step=5
                )
            
            with col2:
                default_take_profit_pips = st.number_input(
                    "VarsayÄ±lan Take Profit (pip):",
                    min_value=20,
                    max_value=400,
                    value=default_take_profit_pips,
                    step=10
                )
            
            # Maksimum lot bÃ¼yÃ¼klÃ¼ÄŸÃ¼
            max_lot_size = st.number_input(
                "Maksimum Lot BÃ¼yÃ¼klÃ¼ÄŸÃ¼:",
                min_value=0.01,
                max_value=10.0,
                value=max_lot_size,
                step=0.01
            )
            
            # Kaydet butonu
            save_risk = st.form_submit_button("Risk AyarlarÄ±nÄ± Kaydet")
        
        # Risk ayarlarÄ±nÄ± kaydet
        if save_risk:
            with st.spinner("Ayarlar kaydediliyor..."):
                try:
                    # Risk ayarlarÄ±nÄ± gÃ¼ncelle
                    risk_settings = {
                        "max_risk_percent": max_risk_percent,
                        "max_daily_risk_percent": max_daily_risk_percent,
                        "max_weekly_risk_percent": max_weekly_risk_percent,
                        "max_open_positions": max_open_positions,
                        "max_positions_per_symbol": max_positions_per_symbol,
                        "default_stop_loss_pips": default_stop_loss_pips,
                        "default_take_profit_pips": default_take_profit_pips,
                        "max_lot_size": max_lot_size
                    }
                    
                    bot.settings.set_setting("risk_management", risk_settings)
                    
                    st.success("Risk ayarlarÄ± baÅŸarÄ±yla kaydedildi!")
                except Exception as e:
                    st.error(f"Ayarlar kaydedilirken hata: {str(e)}")
    
    with tab4:
        st.subheader("Telegram AyarlarÄ±")
        
        # Telegram ayarlarÄ± formu
        with st.form("telegram_settings_form"):
            # Mevcut ayarlarÄ± al
            telegram_settings = bot.settings.get("telegram", {})
            telegram_credentials = bot.settings.api_keys.get("telegram", {})
            
            telegram_enabled = telegram_settings.get("enabled", False)
            bot_token = telegram_credentials.get("bot_token", "")
            chat_id = telegram_credentials.get("chat_id", "")
            
            # Telegram bot aktif
            telegram_enabled = st.checkbox("Telegram Bot Aktif", value=telegram_enabled)
            
            # Bot token
            bot_token = st.text_input("Bot Token:", value=bot_token)
            
            # Chat ID
            chat_id = st.text_input("Chat ID:", value=chat_id)
            
            st.markdown(
                "<div class='info-box'>Telegram bot oluÅŸturmak iÃ§in BotFather'Ä± kullanÄ±n. "
                "Chat ID'nizi Ã¶ÄŸrenmek iÃ§in bot ile sohbet baÅŸlatÄ±n ve "
                "'getUpdates' API'sini kullanÄ±n.</div>",
                unsafe_allow_html=True
            )
            
            # Onay ayarlarÄ±
            confirmation_required = telegram_settings.get("confirmation_required", True)
            confirmation_timeout = telegram_settings.get("confirmation_timeout", 300)
            
            confirmation_required = st.checkbox("Ä°ÅŸlem OnayÄ± Gerekli", value=confirmation_required)
            
            confirmation_timeout = st.slider(
                "Onay Zaman AÅŸÄ±mÄ± (saniye):",
                min_value=60,
                max_value=600,
                value=confirmation_timeout,
                step=30
            )
            
            # Kaydet butonu
            save_telegram = st.form_submit_button("Telegram AyarlarÄ±nÄ± Kaydet")
        
        # Telegram ayarlarÄ±nÄ± kaydet
        if save_telegram:
            with st.spinner("Ayarlar kaydediliyor..."):
                try:
                    # Telegram ayarlarÄ±nÄ± gÃ¼ncelle
                    bot.settings.set_setting("telegram.enabled", telegram_enabled)
                    bot.settings.set_setting("telegram.confirmation_required", confirmation_required)
                    bot.settings.set_setting("telegram.confirmation_timeout", confirmation_timeout)
                    
                    # API anahtarlarÄ±nÄ± gÃ¼ncelle
                    bot.settings.set_api_key("telegram.bot_token", bot_token)
                    bot.settings.set_api_key("telegram.chat_id", chat_id)
                    
                    st.success("Telegram ayarlarÄ± baÅŸarÄ±yla kaydedildi!")
                    
                    # Telegram botunu yeniden baÅŸlat
                    if telegram_enabled:
                        # Bot Ã§alÄ±ÅŸÄ±yorsa Telegram botunu yeniden baÅŸlat
                        if st.session_state.bot_running:
                            bot.telegram_bot.stop()
                            bot.telegram_bot.start()
                except Exception as e:
                    st.error(f"Ayarlar kaydedilirken hata: {str(e)}")
    
    # AyarlarÄ± dÄ±ÅŸa/iÃ§e aktar
    st.markdown("---")
    st.subheader("AyarlarÄ± DÄ±ÅŸa/Ä°Ã§e Aktar")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # AyarlarÄ± dÄ±ÅŸa aktar
        if st.button("AyarlarÄ± DÄ±ÅŸa Aktar"):
            with st.spinner("Ayarlar dÄ±ÅŸa aktarÄ±lÄ±yor..."):
                try:
                    # AyarlarÄ± JSON'a dÃ¶nÃ¼ÅŸtÃ¼r
                    settings_json = json.dumps(bot.settings.settings, indent=4)
                    
                    # Ä°ndirme butonu oluÅŸtur
                    st.download_button(
                        label="AyarlarÄ± Ä°ndir",
                        data=settings_json,
                        file_name="forex_bot_settings.json",
                        mime="application/json"
                    )
                except Exception as e:
                    st.error(f"Ayarlar dÄ±ÅŸa aktarÄ±lÄ±rken hata: {str(e)}")
    
    with col2:
        # AyarlarÄ± iÃ§e aktar
        uploaded_file = st.file_uploader("AyarlarÄ± Ä°Ã§e Aktar", type=["json"])
        
        if uploaded_file is not None:
            if st.button("YÃ¼klenmiÅŸ AyarlarÄ± Uygula"):
                with st.spinner("Ayarlar iÃ§e aktarÄ±lÄ±yor..."):
                    try:
                        # Dosyadan JSON oku
                        settings_json = json.load(uploaded_file)
                        
                        # AyarlarÄ± gÃ¼ncelle
                        bot.settings.settings = settings_json
                        bot.settings.save_settings()
                        
                        st.success("Ayarlar baÅŸarÄ±yla iÃ§e aktarÄ±ldÄ±!")
                    except Exception as e:
                        st.error(f"Ayarlar iÃ§e aktarÄ±lÄ±rken hata: {str(e)}")

def show_performance(bot):
    """
    Performans sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("Performans Analizi")
    
    # Ä°ÅŸlem geÃ§miÅŸi
    try:
        # Son 7 gÃ¼nlÃ¼k iÅŸlemleri al
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        trade_history = bot.broker.get_trade_history(start_date, end_date)
        
        if not trade_history.empty:
            # Ä°ÅŸlem istatistiklerini hesapla
            total_trades = len(trade_history)
            winning_trades = len(trade_history[trade_history['profit'] > 0])
            losing_trades = len(trade_history[trade_history['profit'] < 0])
            
            total_profit = trade_history['profit'].sum()
            avg_profit = trade_history[trade_history['profit'] > 0]['profit'].mean() if winning_trades > 0 else 0
            avg_loss = trade_history[trade_history['profit'] < 0]['profit'].mean() if losing_trades > 0 else 0
            
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            
            # Metrikleri gÃ¶ster
            st.subheader("Ä°ÅŸlem Ä°statistikleri (Son 7 GÃ¼n)")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Toplam Ä°ÅŸlem", f"{total_trades}")
            
            with col2:
                st.metric("KazanÃ§ OranÄ±", f"{win_rate:.1f}%")
            
            with col3:
                st.metric("Toplam Kar/Zarar", f"{total_profit:.2f}")
            
            with col4:
                st.metric("Ortalama Kar", f"{avg_profit:.2f}")
            
            # Ä°ÅŸlem grafiÄŸi
            st.markdown("---")
            st.subheader("Ä°ÅŸlem GeÃ§miÅŸi")
            
            # Ä°ÅŸlemleri gÃ¶ster
            trade_history['time'] = pd.to_datetime(trade_history['time'])
            trade_history = trade_history.sort_values('time')
            
            # Kar/zarar grafiÄŸi
            fig = go.Figure()
            
            # KÃ¼mÃ¼latif kar/zarar
            cumulative_profit = trade_history['profit'].cumsum()
            
            fig.add_trace(
                go.Scatter(
                    x=trade_history['time'],
                    y=cumulative_profit,
                    mode='lines+markers',
                    name='KÃ¼mÃ¼latif Kar/Zarar',
                    line=dict(color='blue', width=2)
                )
            )
            
            # Grafik gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ ayarla
            fig.update_layout(
                title="KÃ¼mÃ¼latif Kar/Zarar",
                xaxis_title="Tarih",
                yaxis_title="Kar/Zarar",
                height=400,
                template='plotly_white'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Ä°ÅŸlem tablosu
            st.subheader("Son Ä°ÅŸlemler")
            
            # Tabloyu gÃ¶ster
            st.dataframe(
                trade_history[['time', 'symbol', 'direction', 'volume', 'price', 'profit']],
                use_container_width=True
            )
        else:
            st.info("Son 7 gÃ¼nde tamamlanan iÅŸlem yok.")
    except Exception as e:
        st.error(f"Ä°ÅŸlem geÃ§miÅŸi alÄ±nÄ±rken hata: {str(e)}")
    
    # Sinyal performansÄ±
    st.markdown("---")
    st.subheader("Sinyal PerformansÄ±")
    
    # Sinyal geÃ§miÅŸinden istatistikler
    signals = st.session_state.signals
    executed_signals = [s for s in signals if s.get("status") == "executed"]
    
    if executed_signals:
        total_signals = len(executed_signals)
        
        # Tamamlanan iÅŸlemleri bul
        completed_trades = []
        
        for signal in executed_signals:
            if "execution_details" in signal:
                ticket = signal["execution_details"].get("ticket")
                
                if ticket:
                    # Ä°ÅŸlemi ara
                    trade = None
                    
                    if not trade_history.empty:
                        trades = trade_history[trade_history['ticket'] == ticket]
                        if not trades.empty:
                            trade = trades.iloc[0]
                    
                    if trade is not None:
                        completed_trades.append({
                            "signal": signal,
                            "trade": trade,
                            "profit": trade['profit']
                        })
        
        if completed_trades:
            # Ä°statistikler
            winning_signals = sum(1 for t in completed_trades if t["profit"] > 0)
            signal_win_rate = (winning_signals / len(completed_trades) * 100)
            
            st.markdown(f"**Sinyal DoÄŸruluk OranÄ±:** {signal_win_rate:.1f}%")
            
            # Tahmin edilen baÅŸarÄ± olasÄ±lÄ±klarÄ±na gÃ¶re gerÃ§ek sonuÃ§lar
            st.markdown("**Tahmin vs GerÃ§ek SonuÃ§lar**")
            
            prob_ranges = {
                "50-60": {"count": 0, "wins": 0},
                "60-70": {"count": 0, "wins": 0},
                "70-80": {"count": 0, "wins": 0},
                "80-90": {"count": 0, "wins": 0},
                "90-100": {"count": 0, "wins": 0}
            }
            
            for trade in completed_trades:
                signal = trade["signal"]
                probability = signal.get("success_probability", 0)
                won = trade["profit"] > 0
                
                # OlasÄ±lÄ±k aralÄ±ÄŸÄ±nÄ± belirle
                for prob_range, data in prob_ranges.items():
                    min_prob, max_prob = map(int, prob_range.split("-"))
                    
                    if min_prob <= probability < max_prob:
                        data["count"] += 1
                        if won:
                            data["wins"] += 1
                        break
            
            # Tablo olarak gÃ¶ster
            prob_data = []
            for prob_range, data in prob_ranges.items():
                if data["count"] > 0:
                    win_rate = (data["wins"] / data["count"]) * 100
                    prob_data.append({
                        "OlasÄ±lÄ±k AralÄ±ÄŸÄ±": prob_range,
                        "Ä°ÅŸlem SayÄ±sÄ±": data["count"],
                        "Kazanan Ä°ÅŸlem": data["wins"],
                        "BaÅŸarÄ± OranÄ±": f"{win_rate:.1f}%"
                    })
            
            if prob_data:
                st.table(pd.DataFrame(prob_data))
        else:
            st.info("TamamlanmÄ±ÅŸ sinyal iÅŸlemi bulunamadÄ±.")
    else:
        st.info("HenÃ¼z iÅŸleme alÄ±nan sinyal yok.")
    
    # Risk geÃ§miÅŸi
    st.markdown("---")
    st.subheader("Risk KullanÄ±mÄ±")
    
    risk_history = bot.risk_manager.get_risk_history(7)
    
    if risk_history:
        # Risk verilerini hazÄ±rla
        risk_df = pd.DataFrame(risk_history)
        risk_df['timestamp'] = pd.to_datetime(risk_df['timestamp'])
        risk_df = risk_df.sort_values('timestamp')
        
        # GÃ¼nlÃ¼k toplam risk
        daily_risk = risk_df.groupby(risk_df['timestamp'].dt.date)['risk_percent'].sum().reset_index()
        daily_risk.columns = ['date', 'total_risk']
        
        # Risk grafiÄŸi
        fig = go.Figure()
        
        fig.add_trace(
            go.Bar(
                x=daily_risk['date'],
                y=daily_risk['total_risk'],
                name='GÃ¼nlÃ¼k Toplam Risk (%)',
                marker_color='blue'
            )
        )
        
        # Maksimum gÃ¼nlÃ¼k risk Ã§izgisi
        max_daily_risk = bot.settings.get("risk_management", {}).get("max_daily_risk_percent", 5.0)
        
        fig.add_trace(
            go.Scatter(
                x=daily_risk['date'],
                y=[max_daily_risk] * len(daily_risk),
                name='Maksimum GÃ¼nlÃ¼k Risk',
                line=dict(color='red', width=2, dash='dash')
            )
        )
        
        # Grafik gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ ayarla
        fig.update_layout(
            title="GÃ¼nlÃ¼k Risk KullanÄ±mÄ±",
            xaxis_title="Tarih",
            yaxis_title="Risk YÃ¼zdesi (%)",
            height=400,
            template='plotly_white'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Risk geÃ§miÅŸi verisi bulunamadÄ±.")

def show_api_management(bot):
    """
    API yÃ¶netimi sayfasÄ±nÄ± gÃ¶ster
    
    Args:
        bot: ForexTradingBot Ã¶rneÄŸi
    """
    st.header("API YÃ¶netimi")
    
    # Api ayarlarÄ± tablarÄ±
    tab1, tab2, tab3 = st.tabs(["Haber KaynaklarÄ±", "Sosyal Medya", "DiÄŸer API'ler"])
    
    with tab1:
        st.subheader("Haber KaynaklarÄ± API AyarlarÄ±")
        
        # Forex Factory
        with st.expander("Forex Factory", expanded=True):
            st.markdown(
                "Forex Factory iÃ§in API anahtarÄ± gerekmez. "
                "Ancak web sitesinden veri Ã§ekilirken sÄ±nÄ±rlamalar olabilir."
            )
            
            # Forex Factory aktif
            forex_factory_enabled = st.checkbox(
                "Forex Factory Aktif",
                value=bot.settings.get("news_sources", {}).get("forex_factory", {}).get("enabled", True)
            )
            
            if st.button("Forex Factory AyarlarÄ±nÄ± Kaydet"):
                try:
                    # AyarlarÄ± gÃ¼ncelle
                    bot.settings.set_setting("news_sources.forex_factory.enabled", forex_factory_enabled)
                    st.success("Forex Factory ayarlarÄ± baÅŸarÄ±yla kaydedildi!")
                except Exception as e:
                    st.error(f"Ayarlar kaydedilirken hata: {str(e)}")
        
        # Investing.com
        with st.expander("Investing.com", expanded=False):
            # Mevcut ayarlarÄ± al
            investing_settings = bot.settings.get("news_sources", {}).get("investing_com", {})
            investing_credentials = bot.settings.api_keys.get("news_sources", {}).get("investing_com", {})
            
            # Investing.com aktif
            investing_enabled = st.checkbox(
                "Investing.com Aktif",
                value=investing_settings.get("enabled", True)
            )
            
            # KullanÄ±cÄ± adÄ± ve ÅŸifre
            investing_username = st.text_input(
                "KullanÄ±cÄ± AdÄ±:",
                value=investing_credentials.get("username", "")
            )
            
            investing_password = st.text_input(
                "Åžifre:",
                type="password",
                value=investing_credentials.get("password", "")
            )
            
            if st.button("Investing.com AyarlarÄ±nÄ± Kaydet"):
                try:
                    # AyarlarÄ± gÃ¼ncelle
                    bot.settings.set_setting("news_sources.investing_com.enabled", investing_enabled)
                    
                    # API anahtarlarÄ±nÄ± gÃ¼ncelle
                    bot.settings.set_api_key("news_sources.investing_com.username", investing_username)
                    bot.settings.set_api_key("news_sources.investing_com.password", investing_password)
                    
                    st.success("Investing.com ayarlarÄ± baÅŸarÄ±yla kaydedildi!")
                except Exception as e:
                    st.error(f"Ayarlar kaydedilirken hata: {str(e)}")
    
    with tab2:
        st.subheader("Sosyal Medya API AyarlarÄ±")
        
        # Twitter API
        with st.expander("Twitter API", expanded=True):
            # Mevcut ayarlarÄ± al
            twitter_settings = bot.settings.get("news_sources", {}).get("twitter", {})
            twitter_credentials = bot.settings.api_keys.get("news_sources", {}).get("twitter", {})
            
            # Twitter API aktif
            twitter_enabled = st.checkbox(
                "Twitter API Aktif",
                value=twitter_settings.get("enabled", False)
            )
            
            # API anahtarlarÄ±
            twitter_api_key = st.text_input(
                "API Key:",
                value=twitter_credentials.get("api_key", "")
            )
            
            twitter_api_secret = st.text_input(
                "API Secret:",
                type="password",
                value=twitter_credentials.get("api_secret", "")
            )
            
            twitter_access_token = st.text_input(
                "Access Token:",
                value=twitter_credentials.get("access_token", "")
            )
            
            twitter_access_token_secret = st.text_input(
                "Access Token Secret:",
                type="password",
                value=twitter_credentials.get("access_token_secret", "")
            )
            
            # Takip edilecek hesaplar
            accounts_to_follow = st.text_input(
                "Takip Edilecek Hesaplar (virgÃ¼lle ayrÄ±lmÄ±ÅŸ):",
                value=",".join(twitter_settings.get("accounts_to_follow", []))
            )
            
            if st.button("Twitter API AyarlarÄ±nÄ± Kaydet"):
                try:
                    # AyarlarÄ± gÃ¼ncelle
                    bot.settings.set_setting("news_sources.twitter.enabled", twitter_enabled)
                    
                    accounts_list = [a.strip() for a in accounts_to_follow.split(",") if a.strip()]
                    bot.settings.set_setting("news_sources.twitter.accounts_to_follow", accounts_list)
                    
                    # API anahtarlarÄ±nÄ± gÃ¼ncelle
                    bot.settings.set_api_key("news_sources.twitter.api_key", twitter_api_key)
                    bot.settings.set_api_key("news_sources.twitter.api_secret", twitter_api_secret)
                    bot.settings.set_api_key("news_sources.twitter.access_token", twitter_access_token)
                    bot.settings.set_api_key("news_sources.twitter.access_token_secret", twitter_access_token_secret)
                    
                    st.success("Twitter API ayarlarÄ± baÅŸarÄ±yla kaydedildi!")
                except Exception as e:
                    st.error(f"Ayarlar kaydedilirken hata: {str(e)}")
    
    with tab3:
        st.subheader("DiÄŸer API AyarlarÄ±")
        
        st.info("Åžu anda baÅŸka API yapÄ±landÄ±rmasÄ± bulunmamaktadÄ±r.")

# Streamlit uygulamasÄ±nÄ± Ã§alÄ±ÅŸtÄ±r
if __name__ == "__main__":
    main()